/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jGraphprocessingsystem;

import com.mxgraph.analysis.mxGraphAnalysis;
import com.mxgraph.model.mxCell;
import com.mxgraph.model.mxGeometry;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.util.mxConstants;
import com.mxgraph.view.mxGraph;
import com.mxgraph.view.mxStylesheet;
import dk.aaue.sna.alg.centrality.BrandesBetweennessCentrality;
import dk.aaue.sna.alg.centrality.CentralityResult;
import dk.aaue.sna.alg.centrality.DangalchevClosenessCentrality;
import dk.aaue.sna.alg.clustering.ModularityMeasureQ;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.AbstractList;
import java.util.AbstractSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jgrapht.UndirectedGraph;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.graph.SimpleGraph;

/**
 *
 * @author Irwansyah
 */
public final class Visualization extends javax.swing.JFrame {

    private final Object parent;
    private final mxGraph graph = new mxGraph();
    private int i = 1;
    private final Random random;
    private final HashMap<String, Element> Nodes = new HashMap<>();
    private final HashMap<String, DirectedEdge> Relations = new HashMap<>();
    private final HashMap<String, Object> jgraphxVertex = new HashMap<>();
    private UndirectedGraph<String, DefaultEdge> jGraphTStringGraph;
    private ArrayList<User> userData;

    /**
     * Creates new form Frame
     */
    public Visualization() {
        this.parent = graph.getDefaultParent();
        this.random = new Random();
        graph.setAllowDanglingEdges(false);
        initJGraphX();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jumlahNodeGenerateTF = new javax.swing.JTextField();
        generateButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        idNodeTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        addNodeButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        idNodeLihatNodeTF = new javax.swing.JTextField();
        lihatNodeButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        edgeLabelLihatEdgeTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lihatEdgeButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        clearAllButton = new javax.swing.JButton();
        diameterBtn = new javax.swing.JButton();
        diameterLabel = new javax.swing.JLabel();
        closenessBtn = new javax.swing.JButton();
        betweenessBtn = new javax.swing.JButton();
        usernameLbl = new javax.swing.JTextField();
        viewAttributesBtn = new javax.swing.JButton();
        browseFileButton = new javax.swing.JButton();
        saveFileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate Node"));

        jLabel1.setText("Jumlah Node");

        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(25, 25, 25)
                        .addComponent(jumlahNodeGenerateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(generateButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jumlahNodeGenerateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tambah Node"));

        jLabel3.setText("Node Label");

        addNodeButton.setText("Tambah Node");
        addNodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNodeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(idNodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addNodeButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idNodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addNodeButton))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Lihat Node"));

        jLabel2.setText("Node Label");

        lihatNodeButton.setText("Lihat");
        lihatNodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lihatNodeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lihatNodeButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(idNodeLihatNodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(idNodeLihatNodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lihatNodeButton))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Lihat Edge"));

        jLabel4.setText("Edge Label");

        lihatEdgeButton.setText("Lihat");
        lihatEdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lihatEdgeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(edgeLabelLihatEdgeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lihatEdgeButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(edgeLabelLihatEdgeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lihatEdgeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        clearAllButton.setText("Clear All");
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });

        diameterBtn.setText("Diameter");
        diameterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diameterBtnActionPerformed(evt);
            }
        });

        diameterLabel.setText("Diameter = 0");

        closenessBtn.setText("Closeness");
        closenessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closenessBtnActionPerformed(evt);
            }
        });

        betweenessBtn.setText("Betweeness");
        betweenessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betweenessBtnActionPerformed(evt);
            }
        });

        viewAttributesBtn.setText("View Attribute");
        viewAttributesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAttributesBtnActionPerformed(evt);
            }
        });

        browseFileButton.setText("Browse File");
        browseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFileButtonActionPerformed(evt);
            }
        });

        saveFileButton.setText("Save File");
        saveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(closenessBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(betweenessBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(diameterLabel)
                            .addComponent(usernameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(diameterBtn))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(viewAttributesBtn)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(resetButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(clearAllButton))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(browseFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton)
                    .addComponent(clearAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closenessBtn)
                    .addComponent(betweenessBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diameterBtn)
                    .addComponent(diameterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewAttributesBtn))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseFileButton)
                    .addComponent(saveFileButton))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        consoleTextArea.setBackground(new java.awt.Color(0, 0, 0));
        consoleTextArea.setColumns(20);
        consoleTextArea.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        consoleTextArea.setForeground(new java.awt.Color(51, 153, 255));
        consoleTextArea.setRows(5);
        consoleTextArea.setText("> ");
        consoleTextArea.setCaretColor(new java.awt.Color(255, 255, 255));
        consoleTextArea.setSelectionColor(new java.awt.Color(204, 204, 204));
        consoleTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                consoleTextAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(consoleTextArea);

        jLabel5.setText("Console");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 436, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addNodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNodeButtonActionPerformed
        graph.getModel().beginUpdate();
        try {
            graph.clearSelection();
            graph.selectAll();
            Object v1 = graph.insertVertex(parent, idNodeTF.getText(), idNodeTF.getText(), random.nextInt(430), random.nextInt(440), 50,
                    50, "ROUNDED");
            Object[] cells = graph.getSelectionCells();
            for (Object c : cells) {
                mxCell cell = (mxCell) c;
                if (cell.isVertex() && !cell.getId().equals("HIDDEN")) {
                    graph.insertEdge(parent, "E" + i, "E" + i, v1, cell, "WITHOUTARROW");
                    i++;
                }
            }
        } finally {
            graph.getModel().endUpdate();
        }
        mxGraphComponent graphComponent = new mxGraphComponent(graph);
        getContentPane().add(graphComponent);
        graph.selectChildCell();
    }//GEN-LAST:event_addNodeButtonActionPerformed

    private void lihatNodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lihatNodeButtonActionPerformed
        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            if (cell.isVertex()) {
                if (!cell.getId().equals(idNodeLihatNodeTF.getText())) {
                    cell.setVisible(false);
                }
            } else {
                cell.setVisible(false);
            }
        }
        graph.refresh();
        graph.selectChildCell();
    }//GEN-LAST:event_lihatNodeButtonActionPerformed

    private void lihatEdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lihatEdgeButtonActionPerformed
        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            if (cell.isEdge()) {
                if (!cell.getId().equals(edgeLabelLihatEdgeTF.getText())) {
                    cell.setVisible(false);
                }
            }
        }
        graph.refresh();
        graph.selectChildCell();
    }//GEN-LAST:event_lihatEdgeButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        resetGraph();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButtonActionPerformed
        clearGraph();
    }//GEN-LAST:event_clearAllButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        clearGraph();
        generateGraph(Integer.parseInt(jumlahNodeGenerateTF.getText()));
    }//GEN-LAST:event_generateButtonActionPerformed

    private void diameterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diameterBtnActionPerformed
        diameter();
    }//GEN-LAST:event_diameterBtnActionPerformed

    private void closenessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closenessBtnActionPerformed
        closeness();
    }//GEN-LAST:event_closenessBtnActionPerformed

    private void betweenessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betweenessBtnActionPerformed
        betweeness();
    }//GEN-LAST:event_betweenessBtnActionPerformed

    private void viewAttributesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAttributesBtnActionPerformed
        Element node = Nodes.get(usernameLbl.getText());
        HashMap<String, Object> attributes = node.getAttributes();
        String attributeInfo = "";
        for (Map.Entry<String, Object> entrySet : attributes.entrySet()) {
            String key = entrySet.getKey();
            Object value = entrySet.getValue();
            attributeInfo += key + "\t: " + value + "\n";
        }
        consoleTextArea.setText(attributeInfo);
//        attributesInfoLbl.setText("test");
    }//GEN-LAST:event_viewAttributesBtnActionPerformed

    private void saveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileButtonActionPerformed
        JsonDataFormat json = new JsonDataFormat();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        FileNameExtensionFilter jsonFilter = new FileNameExtensionFilter("json files (*.json)", "json");
        fileChooser.addChoosableFileFilter(jsonFilter);
        fileChooser.setFileFilter(jsonFilter);
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            json.saveData(userData, fileToSave.getAbsolutePath() + ".json");
        }
    }//GEN-LAST:event_saveFileButtonActionPerformed

    private void browseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter jsonFilter = new FileNameExtensionFilter("json files (*.json)", "json");
        fileChooser.addChoosableFileFilter(jsonFilter);
        fileChooser.setFileFilter(jsonFilter);
        int userSelection = fileChooser.showOpenDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jGraphTStringGraph = createStringGraph(file.getPath());
            viewGraphFromData();
        }
    }//GEN-LAST:event_browseFileButtonActionPerformed

    private void consoleTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consoleTextAreaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            if (consoleTextArea.getText().charAt(consoleTextArea.getCaretPosition() - 2) == '>') {
                evt.consume();
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int startPos = consoleTextArea.getText().lastIndexOf("> ") + 2;
            String query = consoleTextArea.getText().substring(startPos);
            consoleTextArea.setText(consoleTextArea.getText() + "\n> ");
            executeQuery(query);
            evt.consume();
        }
    }//GEN-LAST:event_consoleTextAreaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new Visualization();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNodeButton;
    private javax.swing.JButton betweenessBtn;
    private javax.swing.JButton browseFileButton;
    private javax.swing.JButton clearAllButton;
    private javax.swing.JButton closenessBtn;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JButton diameterBtn;
    private javax.swing.JLabel diameterLabel;
    private javax.swing.JTextField edgeLabelLihatEdgeTF;
    private javax.swing.JButton generateButton;
    private javax.swing.JTextField idNodeLihatNodeTF;
    private javax.swing.JTextField idNodeTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jumlahNodeGenerateTF;
    private javax.swing.JButton lihatEdgeButton;
    private javax.swing.JButton lihatNodeButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveFileButton;
    private javax.swing.JTextField usernameLbl;
    private javax.swing.JButton viewAttributesBtn;
    // End of variables declaration//GEN-END:variables
    private void initJGraphX() {

        setMyGraphStyles();
        graph.getModel().beginUpdate();
        graph.setConnectableEdges(false);
        graph.setCellsEditable(false);
        graph.setCellsDeletable(false);
        graph.setCellsCloneable(false);
        graph.setCellsDisconnectable(false);

        Object hiddenNode = graph.insertVertex(parent, "HIDDEN", "", 473, 454, 0,
                0, "HIDDEN");

        graph.refresh();
        mxGraphComponent graphComponent = new mxGraphComponent(graph);
        getContentPane().add(graphComponent);
        pack();
    }

    private void generateGraph(int numberOfNode) {
        try {
            for (int j = 1; j <= numberOfNode; j++) {
                graph.clearSelection();
                graph.selectAll();

                Object node = graph.insertVertex(parent, "N" + j, "N" + j, random.nextInt(430), random.nextInt(400), 50,
                        50, "ROUNDED");
                Object[] cells = graph.getSelectionCells();
                for (Object c : cells) {
                    mxCell cell = (mxCell) c;
                    if (cell.isVertex() && !cell.getId().equals("HIDDEN")) {
                        graph.insertEdge(parent, "E" + i, "E" + i, node, cell);
//                        graph.insertEdge(parent, "E" + i, "E" + i, node, cell, "WITHOUTARROW");
                        i++;
                    }
                }
            }

        } finally {
            graph.getModel().endUpdate();
        }
        graph.selectChildCell();
    }

    private void resetGraph() {
        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            cell.setVisible(true);
        }
        graph.refresh();
    }

    private void clearGraph() {
        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            if (!cell.getId().equals("HIDDEN")) {
                cell.removeFromParent();
            }
        }
        i = 0;
        graph.refresh();
        graph.selectChildCell();
    }

    private void setMyGraphStyles() {
        mxStylesheet stylesheet = graph.getStylesheet();
        Hashtable<String, Object> style = new Hashtable<String, Object>();
        style.put(mxConstants.STYLE_SHAPE, mxConstants.SHAPE_ELLIPSE);
        style.put(mxConstants.STYLE_OPACITY, 50);
        style.put(mxConstants.STYLE_FILLCOLOR, "#0099CC");
        style.put(mxConstants.STYLE_FONTCOLOR, "#FFFFFF");
        style.put(mxConstants.STYLE_RESIZABLE, "false");
        stylesheet.putCellStyle("ROUNDED", style);

        stylesheet = graph.getStylesheet();
        style = new Hashtable<String, Object>();
        style.put(mxConstants.STYLE_ENDARROW, mxConstants.NONE);
        stylesheet.putCellStyle("WITHOUTARROW", style);

        stylesheet = graph.getStylesheet();
        style = new Hashtable<String, Object>();
        style.put(mxConstants.STYLE_SHAPE, mxConstants.SHAPE_ELLIPSE);
        style.put(mxConstants.STYLE_OPACITY, 50);
        style.put(mxConstants.STYLE_FILLCOLOR, "RED");
        style.put(mxConstants.STYLE_FONTCOLOR, "#FFFFFF");
        style.put(mxConstants.STYLE_RESIZABLE, "false");
        stylesheet.putCellStyle("SELECTED", style);

        stylesheet = graph.getStylesheet();
        style = new Hashtable<String, Object>();
        style.put(mxConstants.STYLE_SHAPE, mxConstants.SHAPE_ELLIPSE);
        style.put(mxConstants.STYLE_RESIZABLE, "false");
        style.put(mxConstants.STYLE_FILLCOLOR, "#F0F0F0");
        style.put(mxConstants.STYLE_LABEL_BORDERCOLOR, "#F0F0F0");
        style.put(mxConstants.STYLE_IMAGE_BORDER, mxConstants.NONE);
        stylesheet.putCellStyle("HIDDEN", style);
    }

    public void diameter() {
        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        int diameter = Integer.MIN_VALUE;
        int cost = 0;
        for (Object from : cells) {
            for (Object to : cells) {
                if (((mxCell) from).isVertex() && ((mxCell) to).isVertex()
                        && !((mxCell) from).getId().equals("HIDDEN") && !((mxCell) to).getId().equals("HIDDEN")) {
                    cost = mxGraphAnalysis.getInstance().getShortestPath(graph, from,
                            to, null, graph.getChildVertices(parent).length, false).length / 2;
//                    System.out.println(((mxCell) from).getValue() + "->" + ((mxCell) to).getValue() + " = " + cost);
                    if (cost > diameter) {
                        diameter = cost;
                    }
                }
            }
        }
//        System.out.println("Diameter = " + diameter);
        diameterLabel.setText("Diameter = " + diameter);
        graph.refresh();
        graph.selectChildCell();
    }

    public void closeness() {
        DangalchevClosenessCentrality closeness = new DangalchevClosenessCentrality(jGraphTStringGraph);
        CentralityResult closenessResult = closeness.calculate();
        String closenessNode = closenessResult.getSortedNodes().get(0).toString();
//        System.out.println(closenessResult.getSortedNodes());

        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            if (cell.isVertex()) {
                if (cell.getValue().equals(closenessNode)) {
                    cell.setStyle("SELECTED");
                }
            }
        }
        graph.refresh();
        graph.selectChildCell();
    }

    public void viewGraphFromData2() {
        Object ALI, BUDI, CINTA, DODI;
        try {
            graph.clearSelection();
            graph.selectAll();

            ALI = graph.insertVertex(parent, "ALI", "ALI", random.nextInt(430), random.nextInt(400), 50,
                    50, "ROUNDED");
            BUDI = graph.insertVertex(parent, "BUDI", "BUDI", random.nextInt(430), random.nextInt(400), 50,
                    50, "ROUNDED");
            CINTA = graph.insertVertex(parent, "CINTA", "CINTA", random.nextInt(430), random.nextInt(400), 50,
                    50, "ROUNDED");
            DODI = graph.insertVertex(parent, "DODI", "DODI", random.nextInt(430), random.nextInt(400), 50,
                    50, "ROUNDED");
            graph.insertEdge(parent, null, "FRIENDS", ALI, BUDI, "WITHOUTARROW");
            graph.insertEdge(parent, null, "FRIENDS", ALI, CINTA, "WITHOUTARROW");
            graph.insertEdge(parent, null, "FRIENDS", CINTA, BUDI, "WITHOUTARROW");
            graph.insertEdge(parent, null, "FRIENDS", CINTA, DODI, "WITHOUTARROW");

        } finally {
            graph.getModel().endUpdate();
        }
        graph.selectChildCell();
    }

    public void viewGraphFromData() {
        graph.clearSelection();
        graph.selectAll();
        try {
            for (Map.Entry<String, Element> entrySet : Nodes.entrySet()) {
                String key = entrySet.getKey();
                Element value = entrySet.getValue();
                jgraphxVertex.put(key, graph.insertVertex(parent, key,
                        value.getAttributes().get("Username"),
                        random.nextInt(430), random.nextInt(400), 50, 50, "ROUNDED"));
            }

            for (Map.Entry<String, DirectedEdge> entrySet : Relations.entrySet()) {
                String key = entrySet.getKey();
                DirectedEdge value = entrySet.getValue();
                String fromUsername = value.getFrom().get("Username").toString();
                String toUsername = value.getTo().get("Username").toString();

                graph.insertEdge(parent, key, value.getEdge().get("Nama"),
                        jgraphxVertex.get(fromUsername), jgraphxVertex.get(toUsername), "WITHOUTARROW");
//                System.out.println(fromUsername + "-" + toUsername);
            }

        } finally {
            graph.getModel().endUpdate();
        }
        graph.selectChildCell();
    }

    private UndirectedGraph<String, DefaultEdge> createStringGraph(String directory) {
        UndirectedGraph<String, DefaultEdge> g
                = new SimpleGraph<String, DefaultEdge>(DefaultEdge.class);
        JsonDataFormat jsondata = new JsonDataFormat();
        userData = jsondata.getData(directory);

        for (User user : userData) {
            //user.view();
            Element USER = new Element();
            USER.addAttribute("Username", user.getUsername());
            USER.addAttribute("Nama", user.getNama());
            USER.addAttribute("Jenis Kelamin", user.getJenis_kelamin());
            USER.addAttribute("Hobi", user.getHobi());
            USER.addAttribute("Tanggal Lahir", user.getTanggal_lahir());
            g.addVertex(USER.get("Username").toString());
            Nodes.put(user.getUsername(), USER);
        }

        for (User user : userData) {
            List<Object> friends = user.getFriends();
            for (Object friend : friends) {
                Element FRIENDS = new Element();
                FRIENDS.addAttribute("Nama", "FRIENDS");
                FRIENDS.setIsEdge(false);

                Relations.put(FRIENDS.getObjectID(), new DirectedEdge("FRIENDS",
                        Nodes.get(user.getUsername()), FRIENDS, Nodes.get(friend.toString())));
//                System.out.println(user.getUsername() + "-" + friend.toString());
                g.addEdge(user.getUsername(), friend.toString());
            }
        }

        return g;
    }

    private void betweeness() {
        BrandesBetweennessCentrality betweenness = new BrandesBetweennessCentrality(jGraphTStringGraph);
        CentralityResult betweenessResult = betweenness.calculate();
        String betweenessNode = betweenessResult.getSortedNodes().get(0).toString();
//        System.out.println(betweenessResult.getSortedNodes());

        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            if (cell.isVertex()) {
                if (cell.getValue().equals(betweenessNode)) {
                    cell.setStyle("SELECTED");
                }
            }
        }
        graph.refresh();
        graph.selectChildCell();
    }

    private void executeQuery(String query) {
        if (query.equals("clear")) {
            consoleTextArea.setText("> ");
            makeAllCellsToDefaultStyle();
        } else if (query.startsWith("friends of")) {
            if (query.endsWith("hobi")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("friends of") + 11, consoleTextArea.getText().length() - 8);
                ArrayList<String> friends = getFriends(username);
                showFriendsAttribute("hobi", friends);
                showFriendsOf(friends);
            } else if (query.endsWith("jenis kelamin")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("friends of") + 11, consoleTextArea.getText().length() - 17);
                ArrayList<String> friends = getFriends(username);
                showFriendsAttribute("jenis kelamin", friends);
                showFriendsOf(friends);
            } else if (query.endsWith("nama lengkap")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("friends of") + 11, consoleTextArea.getText().length() - 16);
                ArrayList<String> friends = getFriends(username);
                showFriendsAttribute("nama lengkap", friends);
                showFriendsOf(friends);
            } else if (query.endsWith("tanggal lahir")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("friends of") + 11, consoleTextArea.getText().length() - 17);
                ArrayList<String> friends = getFriends(username);
                showFriendsAttribute("tanggal lahir", friends);
                showFriendsOf(friends);
            } else {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("friends of") + 11, consoleTextArea.getText().length() - 3);
                ArrayList<String> friends = getFriends(username);
                showFriendsAttribute("username", friends);
                showFriendsOf(friends);
            }
        } else if (query.startsWith("fofof")) {
            if (query.endsWith("hobi")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fofof") + 6, consoleTextArea.getText().length() - 8);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                ArrayList<String> fofof = getFriends(fof);
                showFriendsAttribute("hobi", fofof);
                showFriendsOf(fofof);
            } else if (query.endsWith("jenis kelamin")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fofof") + 6, consoleTextArea.getText().length() - 17);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                ArrayList<String> fofof = getFriends(fof);
                showFriendsAttribute("jenis kelamin", fofof);
                showFriendsOf(fofof);
            } else if (query.endsWith("nama lengkap")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fofof") + 6, consoleTextArea.getText().length() - 16);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                ArrayList<String> fofof = getFriends(fof);
                showFriendsAttribute("nama lengkap", fofof);
                showFriendsOf(fofof);
            } else if (query.endsWith("tanggal lahir")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fofof") + 6, consoleTextArea.getText().length() - 17);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                ArrayList<String> fofof = getFriends(fof);
                showFriendsAttribute("tanggal lahir", fofof);
                showFriendsOf(fofof);
            } else {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fofof") + 6, consoleTextArea.getText().length() - 3);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                ArrayList<String> fofof = getFriends(fof);
                showFriendsAttribute("username", fofof);
                showFriendsOf(fofof);
                System.out.println(username);
            }
        } else if (query.startsWith("fof")) {
            if (query.endsWith("hobi")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fof") + 4, consoleTextArea.getText().length() - 8);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                showFriendsAttribute("hobi", fof);
                showFriendsOf(fof);
            } else if (query.endsWith("jenis kelamin")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fof") + 4, consoleTextArea.getText().length() - 17);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                showFriendsAttribute("jenis kelamin", fof);
                showFriendsOf(fof);
            } else if (query.endsWith("nama lengkap")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fof") + 4, consoleTextArea.getText().length() - 16);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                showFriendsAttribute("nama lengkap", fof);
                showFriendsOf(fof);
            } else if (query.endsWith("tanggal lahir")) {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fof") + 4, consoleTextArea.getText().length() - 17);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                showFriendsAttribute("tanggal lahir", fof);
                showFriendsOf(fof);
            } else if (query.contains("!friend")) {
                String newQuery = query.replace("fof ", "");
                System.out.println("QUERY : " + newQuery);
                String username1 = newQuery.substring(0, newQuery.lastIndexOf("!friend") - 1);
                String username2 = newQuery.substring(newQuery.lastIndexOf("!friend") + "!friend".length() + 1);
                ArrayList<String> friendsUser1 = getFriends(username1);
                ArrayList<String> fofUser1 = getFriends(friendsUser1);
                ArrayList<String> friendsUser2 = getFriends(username2);
                //System.out.println(fofUser1.toString());
                fofUser1 = removeFromListIfSame(fofUser1, friendsUser2);
                //System.out.println(fofUser1.toString());
                System.out.println("fof " + username1);
                System.out.println("!friend " + username2);
                showFriendsOf(fofUser1);
            } else {
                String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                        lastIndexOf("fof") + 4, consoleTextArea.getText().length() - 3);
                ArrayList<String> friends = getFriends(username);
                ArrayList<String> fof = getFriends(friends);
                showFriendsAttribute("username", fof);
                showFriendsOf(fof);
            }
        } else if (query.equals("")) {
        } else if (query.startsWith("view")) {
            String username = consoleTextArea.getText().substring(consoleTextArea.getText().
                    lastIndexOf("view") + 5, consoleTextArea.getText().length() - 3);
            Element node = Nodes.get(username);
            HashMap<String, Object> attributes = node.getAttributes();
            String attributeInfo = "";
            if (attributes.size() > 0) {
                for (Map.Entry<String, Object> entrySet : attributes.entrySet()) {
                    String key = entrySet.getKey();
                    Object value = entrySet.getValue();
                    attributeInfo += key + "\t: " + value + "\n";
                }
                consoleTextArea.setText(consoleTextArea.getText() + attributeInfo + "\n> ");
            } else {
                consoleTextArea.setText("Not Found");
            }
        } else if (query.equals("clustering hobi")) {
            clustering("hobi");
            consoleTextArea.setText(consoleTextArea.getText() + "\n> ");
        } else if (query.equals("clustering usia")) {
            clustering("usia");
            consoleTextArea.setText(consoleTextArea.getText() + "\n> ");
        } else {
            consoleTextArea.setText(consoleTextArea.getText() + "Invalid Query\n> ");
        }
    }

    private void friendOfFriend(String nodeId) {
        ArrayList<String> friends = getFriends(nodeId);
        ArrayList<String> friendsOfFriends = new ArrayList<>();
        for (String friend : friends) {
            friendsOfFriends.addAll(getFriends(friend));
        }
//        System.out.println("FRIENDS OF FRIENDS");
//        for (String friendsOfFriend : friendsOfFriends) {
//            System.out.println(friendsOfFriend);
//        }

        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            if (cell.isVertex()) {
                for (String friendsOfFriend : friendsOfFriends) {
                    if (cell.getValue().equals(friendsOfFriend)) {
                        cell.setStyle("SELECTED");
                    }
                }
            }
        }
        graph.refresh();
        graph.selectChildCell();
    }

    private ArrayList<String> getFriends(String username) {
        ArrayList<String> friends = new ArrayList<>();
        for (User user : userData) {
            if (username.equals(user.getUsername())) {
                List<Object> listFriends = user.getFriends();
                for (Object friend : listFriends) {
                    friends.add(friend.toString());
                }
            }
        }
        return friends;
    }

    private ArrayList<String> getFriends(ArrayList<String> listUsername) {
        ArrayList<String> friends = new ArrayList<>();
        for (String username : listUsername) {
            for (User user : userData) {
                if (username.equals(user.getUsername())) {
                    List<Object> listFriends = user.getFriends();
                    for (Object friend : listFriends) {
                        friends.add(friend.toString());
                    }
                }
            }
        }
        return friends;
    }

    private void clustering(String reference) {
        graph.clearSelection();
        graph.selectAll();

        HashSet hashClass = new HashSet();
        ArrayList<String> listClass = new ArrayList<>();

        if (reference.equals("hobi")) {

            for (User user : userData) {
                hashClass.add(user.getHobi());
            }
            listClass = new ArrayList<>(hashClass);

        } else if (reference.equals("usia")) {
            for (User user : userData) {
                String tahunLahir = user.getTanggal_lahir().substring(user.getTanggal_lahir().length() - 4);
                hashClass.add(tahunLahir);
            }
            listClass = new ArrayList<>(hashClass);
        }

        System.out.println(listClass.toString());

        Object[] cells = graph.getSelectionCells();
        Random random = new Random();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            if (cell.isVertex()) {
                for (User user : userData) {
                    if (cell.getValue().equals(user.getUsername())) {
                        for (int j = 0; j < listClass.size(); j++) {
                            if (reference.equals("hobi")) {
                                if (user.getHobi().equals(listClass.get(j))) {
                                    cell.setGeometry(new mxGeometry(random.nextInt(80) + ((j % 8) * 300), random.nextInt(80) + 300 * (j / 8), 50, 50));
                                }
                            } else if (reference.equals("usia")) {
                                if (user.getTanggal_lahir().substring(user.getTanggal_lahir().length() - 4).equals(listClass.get(j))) {
                                    cell.setGeometry(new mxGeometry(random.nextInt(80) + ((j % 8) * 300), random.nextInt(80) + 300 * (j / 8), 50, 50));
                                }
                            }
                        }
                    }
                }
            }
        }
        graph.refresh();
        graph.selectChildCell();
        consoleTextArea.setText(consoleTextArea.getText() + "found " + listClass.size() + " cluster");
    }

    private void showFriendsOf(ArrayList<String> friends) {
//        for (String friend : friends) {
//            System.out.println(friend);
//        }
        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            if (cell.isVertex()) {
                for (String friend : friends) {
                    if (cell.getValue().equals(friend)) {
                        cell.setStyle("SELECTED");
                    }
                }
            }
        }
        graph.refresh();
        graph.selectChildCell();
    }

    public void makeAllCellsToDefaultStyle() {
        graph.clearSelection();
        graph.selectAll();
        Object[] cells = graph.getSelectionCells();
        for (Object c : cells) {
            mxCell cell = (mxCell) c;
            if (cell.isVertex()) {
                cell.setStyle("ROUNDED");
            }
        }
        graph.refresh();
        graph.selectChildCell();
    }

    private void showFriendsAttribute(String attributeName, ArrayList<String> friends) {
        String output = "";
        for (String username : friends) {
            for (User user : userData) {
                if (username.equals(user.getUsername())) {
                    if (attributeName.equals("hobi")) {
                        output += username + " " + user.getHobi() + "\n";
                    } else if (attributeName.equals("jenis kelamin")) {
                        output += username + " " + user.getJenis_kelamin() + "\n";
                    } else if (attributeName.equals("nama lengkap")) {
                        output += username + " " + user.getNama() + "\n";
                    } else if (attributeName.equals("tanggal lahir")) {
                        output += username + " " + user.getTanggal_lahir() + "\n";
                    } else if (attributeName.equals("username")) {
                        output += username + "\n";
                    }
                }
            }
        }
        consoleTextArea.setText(consoleTextArea.getText() + output + "\n> ");
    }

    private ArrayList<String> removeFromListIfSame(ArrayList<String> arrayList1, ArrayList<String> arrayList2) {
        for (String list2 : arrayList2) {
            for (String list1 : arrayList1) {
                if (list2.equals(list1)) {
                    arrayList1.remove(list1);
                    break;
                }
            }
        }
        return arrayList1;
    }
}
